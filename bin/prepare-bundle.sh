#!/usr/bin/env bash

# This script prepares a "bundle" for a project, given the specified target folder as the first argument.
# This will remove gpg file (*.asc) generated by the maven-gpg-plugin as from time to time these files
# are corrupted.  This will use the gpg command directly to produce the files then use gpg to verify them.

function usage(){
    echo -e "\nYou must specify a target folder e.g. './`basename $0` -t=rSyntaxArea/target'"
    echo -e "\n*** Available Parameters ***\n"
    echo -e "-t | --targetFolder \t\t\t set folder to create a bundle from"
    echo -e "-b | --bundleName \t\t\t the name of the -bundle.jar"
    echo -e "-h | --help \t\t\t Show this help!"
    exit 1
}

for _argument in "$@"
do
    case ${_argument} in
        -t=*|--targetFolder=*)
        _targetFolder="${_argument#*=}"
        ;;
        -b=*|--bundleName=*)
        _bundleName="${_argument#*=}"
        ;;
        -h|--help)
        usage
        ;;
    esac
done

if [ ! -d "$_targetFolder" ]; then
    echo " "
    echo "Target folder supplied is not a directory! ($_targetFolder)"
 	usage
	exit 1
fi

if [ "" == "$_bundleName" ]; then
	echo "The bundle name variable must be defined"
	exit 1
fi

if [ "" == "$GPGPASSPHRASE" ]; then
	echo "Environment variable GPGPASSPHRASE must be defined"
	exit 1
fi

pushd $_targetFolder > /dev/null
rm -f *.asc

cp ../pom.xml ${_bundleName}.pom
bundleJarName=${_bundleName}-bundle.jar

for file in *.jar *.pom
do
	gpg -ab --passphrase $GPGPASSPHRASE $file
	openssl dgst -md5 $file | sed 's/.*= //' > $file.md5
	openssl dgst -sha1 $file | sed 's/.*= //' > $file.sha1
done

for file in *.asc
do 
	gpg --verify $file
	if [ "$?" != "0" ]; then
		echo "Signature couldn't be verified."
		exit 1
	fi
	openssl dgst -md5 $file | sed 's/.*= //' > $file.md5
	openssl dgst -sha1 $file | sed 's/.*= //' > $file.sha1
done

jar -cvf $bundleJarName *.jar *.pom *.asc *.md5 *.sha1
popd > /dev/null